filteredData$PROPDMGEXP <- gsub("","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("?|-","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("+","1", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("\\d","10", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("h|H","100", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("k|K","1000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("m|M","1000000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("b|B","1000000000", filteredData$PROPDMGEXP)
head(filteredData)
filteredData <- newData[newData$YEAR >= 1985, ]
filteredData$PROPDMGEXP <- gsub("","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[\\?|-]","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[\\+]","1", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[0-9]","10", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[h|H]","100", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[k|K]","1000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[m|M]","1000000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[b|B]","1000000000", filteredData$PROPDMGEXP)
head(filteredData)
filteredData <- newData[newData$YEAR >= 1985, ]
filteredData$PROPDMGEXP <- gsub("","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[\\?|-]","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[\\+]","1", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[h|H]","100", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[k|K]","1000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[m|M]","1000000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[b|B]","1000000000", filteredData$PROPDMGEXP)
head(filteredData)
head(filteredData)
filteredData <- newData[newData$YEAR >= 1985, ]
filteredData$PROPDMGEXP <- gsub("[\\?|-]","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[\\+]","1", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[h|H]","100", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[k|K]","1000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[m|M]","1000000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[b|B]","1000000000", filteredData$PROPDMGEXP)
head(filteredData)
summary(filteredData$PROPDMGEXP)
summary(as.numeric(filteredData$PROPDMGEXP))
levels(as.numeric(filteredData$PROPDMGEXP))
levels(filteredData$PROPDMGEXP)
filteredData <- newData[newData$YEAR >= 1985, ]
filteredData$PROPDMGEXP <- gsub("^$","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[\\?|-]","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[\\+]","1", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("^[0-9]$","10", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[h|H]","100", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[k|K]","1000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[m|M]","1000000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[b|B]","1000000000", filteredData$PROPDMGEXP)
head(filteredData)
filteredData <- newData[newData$YEAR >= 1985, ]
filteredData$PROPDMGEXP <- gsub("[\\?|-]","0", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[\\+]","1", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("^[0-9]$","10", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[h|H]","100", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[k|K]","1000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[m|M]","1000000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("[b|B]","1000000000", filteredData$PROPDMGEXP)
filteredData$PROPDMGEXP <- gsub("^$","0", filteredData$PROPDMGEXP)
head(filteredData)
filteredData$PROPDMGEXP <- as.numeric(filteredData$PROPDMGEXP)
levels(filteredData$PROPDMGEXP <- as.numeric(filteredData$PROPDMGEXP))
levels(filteredData$PROPDMGEXP)
View(filteredData)
View(filteredData)
filteredData$CROPDMGEXP <- gsub("[\\?|-]","0", filteredData$CROPDMGEXP)
filteredData$CROPDMGEXP <- gsub("[\\+]","1", filteredData$CROPDMGEXP)
filteredData$CROPDMGEXP <- gsub("^[0-9]$","10", filteredData$CROPDMGEXP)
filteredData$CROPDMGEXP <- gsub("[h|H]","100", filteredData$CROPDMGEXP)
filteredData$CROPDMGEXP <- gsub("[k|K]","1000", filteredData$CROPDMGEXP)
filteredData$CROPDMGEXP <- gsub("[m|M]","1000000", filteredData$CROPDMGEXP)
filteredData$CROPDMGEXP <- gsub("[b|B]","1000000000", filteredData$CROPDMGEXP)
filteredData$CROPDMGEXP <- gsub("^$","0", filteredData$CROPDMGEXP)
filteredData$CROPDMGEXP <- as.numeric(filteredData$CROPDMGEXP)
filteredData <- mutate(filteredData, PROPDMG = PROPDMG*PROPDMGEXP)
filteredData <- mutate(filteredData, CROPDMG = CROPDMG*CROPDMGEXP)
View(filteredData)
head(filteredData$CROPDMG)
head(filteredData$PROPDMG)
View(filteredData)
healthData <- summarize(group_by(filteredData), EVTYPE), TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES)
healthData <- summarize(group_by(filteredData), "EVTYPE"), TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES)
healthData <- summarize(group_by(filteredData, EVTYPE),
TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
healthData <- summarize(aggregate(EVTYPE, filteredData),
TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
library(data.table)
library(data.frame)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
healthData <- summarize(group_by(filteredData, EVTYPE),
TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
library(dplyr)
healthData <- summarize(group_by(filteredData, EVTYPE),
TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
View(healthData)
healthData <- arrange(healthData, desc(TOTAL.FATALITIES, TOTAL.INJURIES))
View(healthData)
healthData <- head(healthDataset, 10)
healthData <- head(healthData, 10)
View(healthData)
healthData <- melt(healthData, id.vars="EVTYPE")
library(reshape)
library(reshape2)
install.packages("reshape2")
healthData <- melt(healthData, id.vars="EVTYPE")
library(reshape2)
healthData <- melt(healthData, id.vars="EVTYPE")
View(healthData)
View(healthData)
healthData <- summarize(group_by(filteredData, EVTYPE),
TOTAL_INJURIES = sum(INJURIES), TOTAL_FATALITIES = sum(FATALITIES))
healthData <- arrange(healthData, desc(TOTAL_FATALITIES, TOTAL_INJURIES))
healthData <- head(healthData, 10)
healthData <- melt(healthData, id.vars="EVTYPE")
View(healthData)
economicData <- summarize(group_by(filteredData, EVTYPE),
TOTAL_PROPERTYDMG = sum(PROPERTYDMG), TOTAL_CROPDMG = sum(CROPDMG))
economicData <- arrange(economicData, desc(TOTAL_PROPERTYDMG, TOTAL_CROPDMG))
economicData <- head(economicData, 10)
economicData <- melt(economicData, id.vars="EVTYPE")
economicData <- summarize(group_by(filteredData, EVTYPE),
TOTAL_PROPERTYDMG = sum(PROPDMG), TOTAL_CROPDMG = sum(CROPDMG))
economicData <- arrange(economicData, desc(TOTAL_PROPDMG, TOTAL_CROPDMG))
economicData <- head(economicData, 10)
economicData <- melt(economicData, id.vars="EVTYPE")
economicData <- summarize(group_by(filteredData, EVTYPE),
TOTAL_PROPDMG = sum(PROPDMG), TOTAL_CROPDMG = sum(CROPDMG))
economicData <- arrange(economicData, desc(TOTAL_PROPDMG, TOTAL_CROPDMG))
economicData <- head(economicData, 10)
economicData <- melt(economicData, id.vars="EVTYPE")
View(economicData)
summary(healthData)
View(healthData)
View(healthData)
healthData$EVTYPE
View(healthData)
rows(healthData$EVTYPE)
levels(healthData$EVTYPE)
head(healthData$EVTYPE,10)
healthData[1:10,]
plotHS <- ggplot(healthDataset, aes(x=reorder(evtype, -value), y=value, fill=variable))
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Damage on Health Sector", title="Top 10 harmful event types to Health Sector")
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
plotHS <- ggplot(healthDataset, aes(x=reorder(evtype, -value), y=value, fill=variable))
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Damage on Health Sector", title="Top 10 harmful event types to Health Sector")
plotHS <- ggplot(healthData, aes(x=reorder(evtype, -value), y=value, fill=variable))
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Damage on Health Sector", title="Top 10 harmful event types to Health Sector")
plotHS
plotHS <- ggplot(healthData, aes(x=reorder(EVTYPE, -value), y=value, fill=variable))
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Damage on Health Sector", title="Top 10 harmful event types to Health Sector")
plotHS
plotHS <- ggplot(healthData, aes(x=reorder(EVTYPE, -value), y=value, fill=variable))
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Fatalities & Injuries", title="Most harmful event types\n to Health Sector since 1985")
plotHS
plotHS <- ggplot(healthData, y=value, fill=variable))
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Fatalities & Injuries", title="Most harmful event types\n to Health Sector since 1985")
healthPlot <- healthPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotHS
plotHS <- ggplot(healthData, y=value, fill=variable)
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Fatalities & Injuries", title="Most harmful event types\n to Health Sector since 1985")
healthPlot <- healthPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotHS
plotHS <- ggplot(healthData, y=value, fill=variable)
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Fatalities & Injuries", title="Most harmful event types\n to Health Sector since 1985")
plotHS <- plotHS + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotHS
plotHS <- ggplot(healthData, aes(x=reorder(evtype, value), y=value, fill=variable)
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Fatalities & Injuries", title="Most harmful event types\n to Health Sector since 1985")
plotHS <- plotHS + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotHS
plotHS <- ggplot(healthData, aes(x=reorder(evtype, value), y=value, fill=variable)
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Fatalities & Injuries", title="Most harmful event types\n to Health Sector since 1985")
plotHS <- plotHS + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotHS
plotHS <- ggplot(healthData, aes(x=reorder(evtype, value), y=value, fill=variable))
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Fatalities & Injuries", title="Most harmful event types\n to Health Sector since 1985")
plotHS <- plotHS + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotHS
plotHS <- ggplot(healthData, aes(x=reorder(EVTYPE, value), y=value, fill=variable))
plotHS <- plotHS + geom_bar(stat="identity")
plotHS <- plotHS  + labs(x="Type of Event", y="Fatalities & Injuries", title="Most harmful event types\n to Health Sector since 1985")
plotHS <- plotHS + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotHS
plotES <- ggplot(healthData, aes(x=reorder(EVTYPE, value), y=value, fill=variable))
plotES <- plotHS + geom_bar(stat="identity")
plotES <- plotHS  + labs(x="Type of Event", y="Property & Crop Damages", title="Most harmful event types\n to Economic Sector since 1985")
plotES <- plotHS + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotES
plotES
plotES <- ggplot(economicData, aes(x=reorder(EVTYPE, value), y=value, fill=variable))
plotES <- plotHS + geom_bar(stat="identity")
plotES <- plotHS  + labs(x="Type of Event", y="Property & Crop Damages", title="Most harmful event types\n to Economic Sector since 1985")
plotES <- plotHS + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotES
plotES
plotES <- ggplot(economicData, aes(x=reorder(EVTYPE, value), y=value, fill=variable))
plotES <- plotES + geom_bar(stat="identity")
plotES <- plotES  + labs(x="Type of Event", y="Property & Crop Damages", title="Most harmful event types\n to Economic Sector since 1985")
plotES <- plotHS + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotES
plotES <- ggplot(economicData, aes(x=reorder(EVTYPE, value), y=value, fill=variable))
plotES <- plotES + geom_bar(stat="identity")
plotES <- plotES  + labs(x="Type of Event", y="Property & Crop Damages", title="Most harmful event types\n to Economic Sector since 1985")
plotES <- plotES + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotES
year
noSim <- 1000; n <- 40; lambda <- 0.2;
simMatrix <- matrix(rexp(noSim * n, lambda), noSim, n)
theoretical_mean <- 1/lambda
sample_mean <- apply(simMatrix, 1, mean)
simMean <- rowMeans(simMatrix)
theoretical_mean <- 1/lambda
sample_mean <- mean(simMean)
c(sample_mean, theoretical_mean)
theoretical_variance <- (1/lambda)^2/n
sample_variance <- var(simMean)
c(sample_variance, theoretical_variance)
error_mean <- (abs(sample_mean-theoretical_mean)/theoretical_mean)
print(error_mean)
print(error_mean + "%")
cat(error_mean, "%")
error_mean <- (abs(sample_mean-theoretical_mean)/theoretical_mean)*100
cat(error_mean, "%")
cat(error_mean, "", "%")
print(paste0(error_mean, "%"))
cat(error_mean, "%", sep = "")
error_variance <- (abs(sample_variance-theoretical_variance)/theoretical_variance)*100
cat(error_variance, "%", sep = "")
(1/lambda)^2
installr::installr()
library(installr)
noSim <- 1000; n <- 40; lambda <- 0.2; set.seed(123);
simMatrix <- matrix(rexp(noSim * n, lambda), noSim, n) #Matrix of 1000 rows with columns containing simulations of the 40 random expontials
simMean <- rowMeans(simMatrix) #Retrieve the means for the 40 samples on each simulation
theoretical_mean <- 1/lambda
sample_mean <- mean(simMean)
c(sample_mean, theoretical_mean)
theoretical_variance <- (1/lambda)^2/n
sample_variance <- var(simMean)
c(sample_variance, theoretical_variance)
(1/lambda)/sqrt(n)
sqrt(0.6250000)
sample_mean+sqrt(sample_variance)
theoretical_mean+sqrt(theoretical_variance)
sample_mean
library(datasets)
ToothGrowth
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
View(ToothGrowth)
fit <- lm(len ~ dose + supp, data=ToothGrowth)
confint(fit)
supp.t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth) ## equal variances,
supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth) ## different variances
supp.resultSupp <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),
"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]), ## low confidence value
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]), ## high confidence value
row.names=c("Equal Var","Unequal Var"))
supp.resultSupp
t1 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth) ## test for supp, different variances
t2 <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth) ## test for dose, different variances
results <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),
"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]), ## low confidence value
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]), ## high confidence value
row.names=c("Equal Var","Unequal Var"))
results
toothG0_5 <- ToothGrowth[ToothGrowth$dose == 0.5,]
toothG1 <- ToothGrowth[ToothGrowth$dose == 1,]
toothG2 <- ToothGrowth[ToothGrowth$dose == 2,]
toothGOJ <- ToothGrowth[ToothGrowth$supp == "OJ",]
toothGVC <- ToothGrowth[ToothGrowth$supp == "VC",]
s1 <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = toothG0_5)
s2 <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = toothG1)
s3 <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = toothG2)
s4 <- t.test(len~dose, paired = FALSE, var.equal = FALSE, data = toothGOJ)
s4 <- t.test(len~dose, paired = FALSE, var.equal = FALSE, data = toothGVC)
s4 <- t.test(len, dose, paired = FALSE, var.equal = FALSE, data = toothGOJ)
View(toothGOJ)
s4 <- t.test(toothGOJ, toothGVC, paired = FALSE, var.equal = FALSE)
toothGOJ <- ToothGrowth[ToothGrowth$supp == "OJ",]$len
toothGVC <- ToothGrowth[ToothGrowth$supp == "VC",]$len
s4 <- t.test(toothGOJ, toothGVC, paired = FALSE, var.equal = FALSE)
toothG0_5 <- ToothGrowth[ToothGrowth$dose == 0.5,]
toothG1 <- ToothGrowth[ToothGrowth$dose == 1,]
toothG2 <- ToothGrowth[ToothGrowth$dose == 2,]
toothGOJ <- ToothGrowth[ToothGrowth$supp == "OJ",]$len
toothGVC <- ToothGrowth[ToothGrowth$supp == "VC",]$len
s1 <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = toothG0_5)
s2 <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = toothG1)
s3 <- t.test(len~supp, paired = FALSE, var.equal = FALSE, data = toothG2)
s4 <- t.test(toothGOJ, toothGVC, paired = FALSE, var.equal = FALSE)
data_frame <- data.frame(p_value = c(s1$p.value, s2$p.value, s3$p.value, s4$p.value,
low = c(s1$conf[[1]], s2$conf[[1]], s3$conf[[1]], s4$conf[[1]]),
high = c(s1$conf[[2]], s2$conf[[2]], s3$conf[[2]], s4$conf[[2]]))
a
fit_basic <- lm(mpg~am, data=mtcars)
summary(fit_basic)
fit_popular <- lm(mpg~cyl+hp+wt+am+gear, data=mtcars)
summary(fit_popular)
a<- summary(fit_popular)
b <- str(mtcars)
str(mtcars)[c(1:4)]
str(mtcars)[-1]
str(mtcars,vec.len=2)
str(mtcars,vec.len=1)
str(mtcars,max.level=1)
str(mtcars,give.head=true)
str(mtcars,give.head=TRUE)
str(mtcars,list.len=1)
test <- t.test(mpg~am,mtcars,
paired=FALSE,var.equal=FALSE,
conf.level=0.95)
print(rbind(test$estimate))
print(cbind(test$estimate))
fit_basic <- lm(mpg~am, data=mtcars)
print(cbind(summary(fit_basic)$coefficients))
fit_basic <- lm(mpg~am, data=mtcars)
print(rbind(summary(fit_basic)$coefficients))
z <- summary(fit_basic)$coefficients
t(summary(fit_basic)$coefficients)
fit_popular <- lm(mpg~cyl+hp+wt+am+gear,
data=mtcars)
z <- summary(fit_popular)$coefficients
z[,1:3]
fit_best <- step(lm(mpg~., data=mtcars), direction="both", trace=0)
a <- summary(fit_best)
a$call
a$fstatistic
a$p.value
fit_best <- step(lm(mpg~., data=mtcars), direction="both", trace=0
)
sumarry(fit_best)
sumary(fit_best)
summary(fit_best)
summary(a$residuals)
fit_best <- step(lm(mpg~., data=mtcars),
direction="both", trace=0)
summary(fit_best)
plot(cor(mtcars))
cor(mtcars)
swirl()
library(swirl)
swirl()
lm(fertility~.,swiss)
lm(fertility~.,data=swiss)
lm(Fertility~.,data=swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility~Agriculture,swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination,Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
"ec <- swiss$Examination+swiss$Catholic
""
q
:q
p
ec <- swiss$Examination+swiss$Catholic
;
>>
ñ
"
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility~.+ec,swiss)
all$coefficients-efit$coefficients
72
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays,mean)
sapply(InsectSprays,class)
fit <- lm(count~spray,InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray-1,InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,c("C"))
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(hunger~Year,hunger)
fit <- lm(Numeric~Year,hunger)
summary(fit)$coef
lmF <- (Numeric~Year,hunger(x[hunger$Sex=="Female"]))
lmF <- lm(Numeric~Year,hunger(x[hunger$Sex=="Female"]))
x[hunger$Sex=="Female"]
lmF <- lm(Numeric~Year,hunger[hunger$Sex=="Female"]))
lmF <- lm(Numeric~Year,hunger[hunger$Sex=="Female"])
a <- hunger[hunger$Sex=="Female"]
View(hunger)
View(hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- fit(Numeric~Sex+Year,hunger)
lmBoth <- lm(Numeric~Sex+Year,hunger)
summary(lmBoth)
lmInter <- lm(Numeric~Sex+Year+Sex*Year,hunger)
summary(lmInter)
swirl()
fit <-lm(y~x,out2)
plot(fit,which=1)
fitno <-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqroot(fit$deviance/fit$freedom)
sigma <- root(fit$deviance/fit$freedom)
sigma <- (fit$deviance/fit$freedom)^(1/2)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
dy/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(ggplot2)
library(caret)
ncol(training)
which(sapply(adData,class)=="factor")
summary(training$diagnosis)
training$diagnosis = as.numeric(training$diagnosis)
p <- prcomp(training[,grep('^IL',names(training))])
p$rotation[,1:7]
qplot(1:length(p$sdev),p$sdev / sum(p$sdev))
which(cumsum(p$sdev) / sum(p$sdev) <= .8)
(cumsum(p$sdev) / sum(p$sdev))[8]
#Result here
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.8)
install.packages("caret")
library(ggplot2)
library(caret)
ncol(training)
which(sapply(adData,class)=="factor")
summary(training$diagnosis)
training$diagnosis = as.numeric(training$diagnosis)
p <- prcomp(training[,grep('^IL',names(training))])
p$rotation[,1:7]
qplot(1:length(p$sdev),p$sdev / sum(p$sdev))
which(cumsum(p$sdev) / sum(p$sdev) <= .8)
(cumsum(p$sdev) / sum(p$sdev))[8]
#Result here
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.8)
install.packages("caret")
install.packages("data.table")
install.packages("randomForest")
library(caret)
library(randomForest)
library(data.table)
library(knitr)
library(markdown)
setwd("~/Predmachlearn_Project/")
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
training <- training[, which(as.numeric(colSums(is.na(training)))==0)]
testing <- testing[, which(as.numeric(colSums(is.na(testing)))==0)]
training <- training[,-(1:7)] ##user_name, timestamps, windows
testing <- testing[,-(1:7)] ##user_name, timestamps, windows
training <- training[, nearZeroVar(training, saveMetrics = TRUE)$nzv==FALSE]
testing <-testing[, nearZeroVar(testing, saveMetrics = TRUE)$nzv==FALSE]
View(training)
summary(training$classe)
names(getModelInfo())
install.packages("e1071")
train_idx <- createDataPartition(y = training$classe, p=0.7,list=FALSE);
sub_training <- training[train_idx,];
sub_testing <- training[-train_idx,];
#random seed
set.seed(98765)
#two models generated:  random forest ["rf"] and boosted trees ["gbm"]
model_rf <- train(classe ~ ., method = "rf", data = sub_training)
